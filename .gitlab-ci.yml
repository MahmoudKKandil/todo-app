# The local-dev to production deployment workflow is as such:
# 1) LOCAL DEV: Change some code, then git commit/push to 'master'. These trigger: 
#     --> build-on-commit
#     --> test-on-commit
#
# 2) When wanting to deploy to PRODUCTION (release to Docker Hub and Artifact Hub):
#    You need to manually run on LOCAL DEV: $ yarn version --patch (OR --minor OR --major)
#    There is a script called `.version_update.sh` which properly changes all the semver for files
#    and it creates a new Git tag with the new version number. The tag is what triggers:
#     --> deploy-with-git-tag
#
# Note: If desired for fully automated CI/CD (local-dev-to-prod), another Branch Pipeline job could
# be configured before the `deploy-with-git-tag` such that it could:
#  a. Run the `.version_update.sh` script (modified) so that no manual confirmation input is needed.
#     The sanity check was to help prevent accidental releases to the world that we didn't intend.
#     Especially if we accidentally used --minor instead of --patch for just a bugfix.
#
#  b. Probably modify that same script to handle --patch | --minor | --major SemVer somehow with like:
#     $ git commit -m '[semver patch]'
#     which then could kick-off the --patch form of SemVer.
#
#  c. After the above occurs in this hypothetical scenario, the `.version_update.sh` would create the
#     Git tag and then trigger the `deploy-with-git-tag` job which would launch to PRODUCTION automatically.

# List of stages for jobs, and their order of execution
stages:
  - build   # Yarn install, Prettier formatting checks, & Jest unit tests
  - test    # GitLab's SAST
  - deploy  # Containerize, deploy to Docker Hub, & update the Helm Chart (which can activate GitOps K8s rollout)

# Job: Build when a Git tag is NOT present.
build-on-commit:
  stage: build
  rules:
    - if: $CI_COMMIT_TAG
      when: never
    - if: $CI_COMMIT_BRANCH
      when: always
  trigger:
    include:
      - local: '.gitlab-ci-1-build.yml'
    strategy: depend

# Job: Test when Git tag is NOT present.
test-on-commit:
  stage: test
  rules:
    - if: $CI_COMMIT_TAG
      when: never
    - if: $CI_COMMIT_BRANCH
      when: always
  trigger:
    include:
      - local: '.gitlab-ci-2-test.yml'
    strategy: depend

# Job: Deploy when a Git tag is ACTUALLY present.
# To kickoff, do `yarn version --patch` (OR --minor OR --major) when you have confirmed the build succeeded.
# As in, if you run `yarn version` on untested commits, then a BROKEN build may get released to PRODUCTION
# since GitLab is configured to run both the Branch & Git Tag Pipelines at the same time. See the notes
# above about a way to handle full CI/CD from local-dev to production if desired.
deploy-with-git-tag:
  stage: deploy
  rules:
    - if: $CI_COMMIT_TAG
      when: always
  trigger:
    include:
      - local: '.gitlab-ci-3-deploy.yml'
    strategy: depend
